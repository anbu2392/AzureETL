{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "BOOTO-ADF"
		},
		"DynamicLinkedService_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'DynamicLinkedService'"
		},
		"botDest_DB_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'botDest_DB'"
		},
		"botDevlDB_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'botDevlDB'"
		},
		"AKV_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://booto-keyvault.vault.azure.net/"
		},
		"OnPremMSI_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "\\\\MSI\\ToAzure"
		},
		"OnPremMSI_properties_typeProperties_userId": {
			"type": "string",
			"defaultValue": "shareuser"
		},
		"bottoblobstorage_properties_typeProperties_serviceEndpoint": {
			"type": "string",
			"defaultValue": "https://bottoblobstorage.blob.core.windows.net"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/BlobCSVToSQL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFileName": "data.csv",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Id",
											"type": "Int32",
											"physicalType": "String"
										},
										"sink": {
											"name": "ID",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "Name",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Name",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Address",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Address",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "blobdatacsvfile",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "botdevldb_destination",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"folder": {
					"name": "OnPremCopies"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/blobdatacsvfile')]",
				"[concat(variables('factoryId'), '/datasets/botdevldb_destination')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CRM_IncrementalLoad')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LookupConfigTable",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select * from stg.Config where Enabled=1;",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "BotDestStgConfigTable",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "FilterOnlyCRM",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "LookupConfigTable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LookupConfigTable').output.value",
								"type": "Expression"
							},
							"condition": {
								"value": "@equals(Item().Source,'CRM')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEachEnabledTable",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FilterOnlyCRM",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FilterOnlyCRM').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "CheckincrementalLoad",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(item().Incremental_Full_Load,1)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "CopyDataFull",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": {
															"value": "select * from @{item().Table_Name}",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00"
													},
													"sink": {
														"type": "AzureSqlSink",
														"preCopyScript": {
															"value": "@{concat('truncate table dbo.',item().Table_Name)}",
															"type": "Expression"
														},
														"disableMetricsCollection": false
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "DS_BotDevl_dynamicTable",
														"type": "DatasetReference",
														"parameters": {}
													}
												],
												"outputs": [
													{
														"referenceName": "BotDestStgDynamicTable",
														"type": "DatasetReference",
														"parameters": {
															"DatasetTable_Name": "@{item().Table_Name}"
														}
													}
												]
											},
											{
												"name": "GetMaxDatefromSourceTable_copy1",
												"type": "Lookup",
												"dependsOn": [
													{
														"activity": "CopyDataFull",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": {
															"value": "select max(Last_Updated_Time) as MaxD from @{item().Table_Name} ",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00"
													},
													"dataset": {
														"referenceName": "DS_BotDevl_dynamicTable",
														"type": "DatasetReference",
														"parameters": {}
													}
												}
											},
											{
												"name": "SetMaxDateinConfig_copy1",
												"type": "Lookup",
												"dependsOn": [
													{
														"activity": "GetMaxDatefromSourceTable_copy1",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": {
															"value": "update stg.Config set MAX_LastUpdatedDate = '@{activity('GetMaxDatefromSourceTable_copy1').output.firstRow.MaxD}'\nwhere table_name like '@{item().Table_Name}'\n\nselect '1'",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00"
													},
													"dataset": {
														"referenceName": "BotDestStgConfigTable",
														"type": "DatasetReference",
														"parameters": {}
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "GetMaxDatefromSourceTable",
												"type": "Lookup",
												"dependsOn": [
													{
														"activity": "Copy data1",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": {
															"value": "select max(Last_Updated_Date) as MaxD from @{item().Table_Name} ",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00"
													},
													"dataset": {
														"referenceName": "DS_BotDevl_dynamicTable",
														"type": "DatasetReference",
														"parameters": {}
													}
												}
											},
											{
												"name": "Copy data1",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": {
															"value": "select * from @{item().Table_Name} where Last_Updated_Date > convert(datetime,'@{item().Max_LastUpdatedDate}')",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00"
													},
													"sink": {
														"type": "AzureSqlSink"
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "DS_BotDevl_dynamicTable",
														"type": "DatasetReference",
														"parameters": {}
													}
												],
												"outputs": [
													{
														"referenceName": "BotDestStgDynamicTable",
														"type": "DatasetReference",
														"parameters": {
															"DatasetTable_Name": "@{item().Table_Name}"
														}
													}
												]
											},
											{
												"name": "SetMaxDateinConfig",
												"type": "Lookup",
												"dependsOn": [
													{
														"activity": "GetMaxDatefromSourceTable",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": {
															"value": "update stg.Config set MAX_LastUpdatedDate = '@{activity('GetMaxDatefromSourceTable').output.firstRow.MaxD}' where table_name like '@{item().Table_Name}'\n\nselect '1'",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00"
													},
													"dataset": {
														"referenceName": "BotDestStgConfigTable",
														"type": "DatasetReference",
														"parameters": {}
													}
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"variables": {
					"Item": {
						"type": "Array"
					},
					"Lookup output1": {
						"type": "Array"
					},
					"Lookup Output2": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/BotDestStgConfigTable')]",
				"[concat(variables('factoryId'), '/datasets/DS_BotDevl_dynamicTable')]",
				"[concat(variables('factoryId'), '/datasets/BotDestStgDynamicTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ConditionalDataTransfer')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetMetaData",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "onPremNewFolderlist",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "FileServerReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "Filterfiles",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "GetMetaData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetMetaData').output.childitems",
								"type": "Expression"
							},
							"condition": {
								"value": "@startswith(item().name,'d3')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 5
						}
					},
					{
						"name": "ifFilterEmpty",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Filterfiles",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@empty(activity('Filterfiles').output)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Append variable1",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "var_filesPresent",
										"value": "'Yes'"
									}
								}
							]
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filterfiles",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filterfiles').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "FileServerReadSettings",
												"recursive": true,
												"wildcardFileName": {
													"value": "@item().name",
													"type": "Expression"
												},
												"deleteFilesAfterCompletion": false
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "logfilesfromOnpremise",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "logfilestoBlob",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					},
					{
						"name": "FileLookup",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "dataCsvFile",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					}
				],
				"variables": {
					"var_filesPresent": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "testActivities"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/onPremNewFolderlist')]",
				"[concat(variables('factoryId'), '/datasets/dataCsvFile')]",
				"[concat(variables('factoryId'), '/datasets/logfilesfromOnpremise')]",
				"[concat(variables('factoryId'), '/datasets/logfilestoBlob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyPipeline_CustData_BlobToSQL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_b4m",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "data//customer-data.csv"
							},
							{
								"name": "Destination",
								"value": "dbo.Customer_Data"
							}
						],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings",
									"skipLineCount": 0
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"validateDataConsistency": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "CID",
											"type": "Int32",
											"physicalType": "String"
										},
										"sink": {
											"name": "CID",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Name",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Name",
											"type": "String"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "BlobCustDataSource",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "BotDevl_CustomerData",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/BlobCustDataSource')]",
				"[concat(variables('factoryId'), '/datasets/BotDevl_CustomerData')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dataflow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "SalesDataCopy",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"DataLakeSalesData": {},
									"ReferenceStreamCustomerData": {},
									"TobotdevlDB": {},
									"ToBotDevlsalesData20": {},
									"ToSalesDataOthers": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							}
						}
					}
				],
				"folder": {
					"name": "DataFlows"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/SalesDataCopy')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/JoinCustandSales')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dataflow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "joinTables",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SalesData": {},
									"CustData": {},
									"SQLTable": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							}
						}
					}
				],
				"folder": {
					"name": "DataFlows"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/joinTables')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OnPremCSVtoSQL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "OnPremCsvToSql",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Id",
											"type": "Int32",
											"physicalType": "String"
										},
										"sink": {
											"name": "ID",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "Name",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Name",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Address",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Address",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "dataCsvFile",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "botdevldb_destination",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"folder": {
					"name": "OnPremCopies"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dataCsvFile')]",
				"[concat(variables('factoryId'), '/datasets/botdevldb_destination')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCD Type 2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dataflow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "SCDType2",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"StagingSalesRep": {},
									"DimSalesKeyHistory": {},
									"MAXKEY": {},
									"InsertFlowSink": {},
									"UpdateFlagSink": {},
									"InsertupdatedRecords": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/SCDType2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQLDataTransferbasedOnCondition')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select * from dbo.Config where enabled=1",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "botDevlConfigTable",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "CopyDatatoSQL",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "AzureSqlSink",
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "botDevlDynamicTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "BotDestDB",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"folder": {
					"name": "testActivities"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/botDevlConfigTable')]",
				"[concat(variables('factoryId'), '/datasets/botDevlDynamicTable')]",
				"[concat(variables('factoryId'), '/datasets/BotDestDB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQLDataTransferbasedOnCondition_type2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "botDevlConfigTable",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "CopyDatatoSQL",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "CheckEnabledColumn",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "truncate table dbo.Customer",
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "botDevlDynamicTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "BotDestDB",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "CheckEnabledColumn",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup1').output.value",
								"type": "Expression"
							},
							"condition": {
								"value": "@equals(item().Enabled,1)",
								"type": "Expression"
							}
						}
					}
				],
				"folder": {
					"name": "testActivities"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/botDevlConfigTable')]",
				"[concat(variables('factoryId'), '/datasets/botDevlDynamicTable')]",
				"[concat(variables('factoryId'), '/datasets/BotDestDB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SplitCustTable')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dataflow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "SplitCustData",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"CustData": {},
									"DeptData": {},
									"toHRTable": {},
									"ToFinanceTable": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							}
						}
					}
				],
				"folder": {
					"name": "DataFlows"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/SplitCustData')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/mulipleonpremToSQL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"wildcardFileName": "file*.txt",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "truncate table dbo.CopyDemo",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Id",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Id",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "Name",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Name",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "City",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "City",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "OnPremMultiplefiles",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "botdevlDB_DboCopyData",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"folder": {
					"name": "OnPremCopies"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/OnPremMultiplefiles')]",
				"[concat(variables('factoryId'), '/datasets/botdevlDB_DboCopyData')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BlobCustDataSource')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "bottoblobstorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "customer-data.csv",
						"container": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "CID",
						"type": "String"
					},
					{
						"name": "Name",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/bottoblobstorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BotDestDB')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "botDest_DB",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "Customer"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/botDest_DB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BotDestDimSalesKeyHistory')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "botDest_DB",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "SalesRep_Key",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SalesRep_Number",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SalesRep_Name",
						"type": "varchar"
					},
					{
						"name": "SalesRep_Dept",
						"type": "varchar"
					},
					{
						"name": "CurrentFlag",
						"type": "int",
						"precision": 10
					},
					{
						"name": "VerifyField",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Dim_SalesRepHistory"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/botDest_DB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BotDestStgConfigTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "botDest_DB",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Table_Name",
						"type": "varchar"
					},
					{
						"name": "Source",
						"type": "varchar"
					},
					{
						"name": "Max_LastUpdatedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "Enabled",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Incremental_Full_Load",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "stg",
					"table": "Config"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/botDest_DB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BotDestStgDynamicTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "botDest_DB",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"DatasetTable_Name": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "stg",
					"table": {
						"value": "@dataset().DatasetTable_Name",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/botDest_DB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BotDestStgSalesRep')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "botDest_DB",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "SalesRep_Number",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SalesRep_Name",
						"type": "varchar"
					},
					{
						"name": "SalesRep_Department",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "stg",
					"table": "Sales_Rep"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/botDest_DB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BotDevlSalesData10')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "botDevlDB",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "InvoiceNo",
						"type": "int",
						"precision": 10
					},
					{
						"name": "StockCode",
						"type": "varchar"
					},
					{
						"name": "Description",
						"type": "varchar"
					},
					{
						"name": "Quantity",
						"type": "int",
						"precision": 10
					},
					{
						"name": "InvoiceDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "UnitPrice",
						"type": "float",
						"precision": 15
					},
					{
						"name": "CustomerID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Country",
						"type": "varchar"
					},
					{
						"name": "CustomerName",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "SalesData10"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/botDevlDB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BotDevl_CustomerData')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "botDevlDB",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "Customer_Data"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/botDevlDB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BotDevl_SalesDataOthers')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "botDevlDB",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "InvoiceNo",
						"type": "int",
						"precision": 10
					},
					{
						"name": "StockCode",
						"type": "varchar"
					},
					{
						"name": "Description",
						"type": "varchar"
					},
					{
						"name": "Quantity",
						"type": "int",
						"precision": 10
					},
					{
						"name": "InvoiceDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "UnitPrice",
						"type": "float",
						"precision": 15
					},
					{
						"name": "CustomerID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Country",
						"type": "varchar"
					},
					{
						"name": "CustomerName",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "SalesDataOthers"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/botDevlDB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BotdevlSalesData')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "botDevlDB",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "InvoiceNo",
						"type": "int",
						"precision": 10
					},
					{
						"name": "StockCode",
						"type": "nvarchar"
					},
					{
						"name": "Description",
						"type": "nvarchar"
					},
					{
						"name": "Quantity",
						"type": "int",
						"precision": 10
					},
					{
						"name": "InvoiceDate",
						"type": "date"
					},
					{
						"name": "UnitPrice",
						"type": "real",
						"precision": 7
					},
					{
						"name": "CustomerID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Country",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "SalesData"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/botDevlDB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_BOTDestFinanceTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "botDest_DB",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Cust_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Cust_Name",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Finance"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/botDest_DB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_BOTDestHRTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "botDest_DB",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Cust_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Cust_Name",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "HR"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/botDest_DB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_BOTDevlDBSalesData20')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "botDevlDB",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "InvoiceNo",
						"type": "int",
						"precision": 10
					},
					{
						"name": "StockCode",
						"type": "varchar"
					},
					{
						"name": "Description",
						"type": "varchar"
					},
					{
						"name": "Quantity",
						"type": "int",
						"precision": 10
					},
					{
						"name": "InvoiceDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "UnitPrice",
						"type": "float",
						"precision": 15
					},
					{
						"name": "CustomerID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Country",
						"type": "varchar"
					},
					{
						"name": "CustomerName",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "SalesData20"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/botDevlDB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_BotDevlCustData')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "botDevlDB",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Customer_Name",
						"type": "varchar"
					},
					{
						"name": "Salary",
						"type": "float",
						"precision": 15
					},
					{
						"name": "Dept_ID",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Customer"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/botDevlDB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_BotDevl_DeptData')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "botDevlDB",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Dept_Name",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Department"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/botDevlDB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_BotDevl_dynamicTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "botDevlDB",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/botDevlDB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_salesdatafromblob')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "bottoblobstorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "sales-data-part1.csv",
						"container": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "InvoiceNo",
						"type": "String"
					},
					{
						"name": "StockCode",
						"type": "String"
					},
					{
						"name": "Description",
						"type": "String"
					},
					{
						"name": "Quantity",
						"type": "String"
					},
					{
						"name": "InvoiceDate",
						"type": "String"
					},
					{
						"name": "UnitPrice",
						"type": "String"
					},
					{
						"name": "CustomerID",
						"type": "String"
					},
					{
						"name": "Country",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/bottoblobstorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DynamicDatasetParameterize')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DynamicLinkedService",
					"type": "LinkedServiceReference",
					"parameters": {
						"LinkedServiceParam": {
							"value": "@dataset().DataSetParameter",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"DataSetParameter": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DynamicLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OnPremMultiplefiles')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OnPremMSI",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Id",
						"type": "String"
					},
					{
						"name": "Name",
						"type": "String"
					},
					{
						"name": "City",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OnPremMSI')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/blobdatacsvfile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "bottoblobstorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Id",
						"type": "String"
					},
					{
						"name": "Name",
						"type": "String"
					},
					{
						"name": "Address",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/bottoblobstorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/botDevlConfigTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "botDevlDB",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Name",
						"type": "varchar"
					},
					{
						"name": "Type",
						"type": "varchar"
					},
					{
						"name": "Enabled",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Config"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/botDevlDB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/botDevlDynamicTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "botDevlDB",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@activity('Lookup1').output.Value[0].Name",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/botDevlDB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/botdevlDB_DboCopyData')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "botDevlDB",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Name",
						"type": "varchar"
					},
					{
						"name": "City",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "CopyDemo"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/botDevlDB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/botdevldb_destination')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "botDevlDB",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Name",
						"type": "varchar"
					},
					{
						"name": "Address",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "destination"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/botDevlDB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataCsvFile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OnPremMSI",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"fileName": "data.csv"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Id",
						"type": "String"
					},
					{
						"name": "Name",
						"type": "String"
					},
					{
						"name": "Address",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OnPremMSI')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/logfilesfromOnpremise')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OnPremMSI",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"folderPath": "New folder"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OnPremMSI')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/logfilestoBlob')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "bottoblobstorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "output"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/bottoblobstorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/onPremNewFolderlist')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OnPremMSI",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"folderPath": "New folder"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OnPremMSI')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AKV')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('AKV_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DynamicLinkedService')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"LinkedServiceParam": {
						"type": "String",
						"defaultValue": "bot-servers.database.windows.net"
					}
				},
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('DynamicLinkedService_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/OnPremMSI')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "FileServer",
				"typeProperties": {
					"host": "[parameters('OnPremMSI_properties_typeProperties_host')]",
					"userId": "[parameters('OnPremMSI_properties_typeProperties_userId')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AKV",
							"type": "LinkedServiceReference"
						},
						"secretName": "MSI-password"
					}
				},
				"connectVia": {
					"referenceName": "OnPremSelHostedIR",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/OnPremSelHostedIR')]",
				"[concat(variables('factoryId'), '/linkedServices/AKV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/botDest_DB')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('botDest_DB_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AKV",
							"type": "LinkedServiceReference"
						},
						"secretName": "bot-devl-etllogin-password"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AKV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/botDevlDB')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "bot-Devel dB",
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('botDevlDB_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AKV",
							"type": "LinkedServiceReference"
						},
						"secretName": "bot-devl-etllogin-password"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AKV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bottoblobstorage')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"serviceEndpoint": "[parameters('bottoblobstorage_properties_typeProperties_serviceEndpoint')]",
					"accountKind": "StorageV2"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/OnPremSelHostedIR')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"description": "my self hosted IR",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCDType2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "BotDestStgSalesRep",
								"type": "DatasetReference"
							},
							"name": "StagingSalesRep"
						},
						{
							"dataset": {
								"referenceName": "BotDestDimSalesKeyHistory",
								"type": "DatasetReference"
							},
							"name": "DimSalesKeyHistory"
						},
						{
							"dataset": {
								"referenceName": "BotDestDimSalesKeyHistory",
								"type": "DatasetReference"
							},
							"name": "MAXKEY"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "BotDestDimSalesKeyHistory",
								"type": "DatasetReference"
							},
							"name": "InsertFlowSink"
						},
						{
							"dataset": {
								"referenceName": "BotDestDimSalesKeyHistory",
								"type": "DatasetReference"
							},
							"name": "UpdateFlagSink"
						},
						{
							"dataset": {
								"referenceName": "BotDestDimSalesKeyHistory",
								"type": "DatasetReference"
							},
							"name": "InsertupdatedRecords"
						}
					],
					"transformations": [
						{
							"name": "RenameColumns"
						},
						{
							"name": "MaxKeyJoin"
						},
						{
							"name": "LookupDimTable"
						},
						{
							"name": "Split"
						},
						{
							"name": "AddEnabledFlag"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "setUpdateFlag"
						},
						{
							"name": "Filter1"
						},
						{
							"name": "AlterRow2"
						},
						{
							"name": "DerivedColumn1"
						}
					],
					"script": "source(output(\n\t\tSalesRep_Number as integer,\n\t\tSalesRep_Name as string,\n\t\tSalesRep_Department as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> StagingSalesRep\nsource(output(\n\t\tSalesRep_Key as integer,\n\t\tSalesRep_Number as integer,\n\t\tSalesRep_Name as string,\n\t\tSalesRep_Dept as string,\n\t\tCurrentFlag as integer,\n\t\tVerifyField as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> DimSalesKeyHistory\nsource(output(\n\t\tMAXKEY as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select max(SalesRep_Key) as MAXKEY from dbo.Dim_SalesRepHistory',\n\tformat: 'query') ~> MAXKEY\nDimSalesKeyHistory select(mapColumn(\n\t\tDim_SalesRep_Key = SalesRep_Key,\n\t\tDim_SalesRep_Number = SalesRep_Number,\n\t\tDim_SalesRep_Name = SalesRep_Name,\n\t\tDim_SalesRep_Dept = SalesRep_Dept,\n\t\tCurrentFlag,\n\t\tVerifyField\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RenameColumns\nStagingSalesRep, MAXKEY join(true(),\n\tjoinType:'cross',\n\tbroadcast: 'auto')~> MaxKeyJoin\nMaxKeyJoin, RenameColumns lookup(SalesRep_Number == Dim_SalesRep_Number,\n\tmultiple: true,\n\tbroadcast: 'auto')~> LookupDimTable\nLookupDimTable split(isNull(Dim_SalesRep_Number),\n\tdisjoint: false) ~> Split@(New, Existing)\nSplit@New derive(EnabledFlag = 1) ~> AddEnabledFlag\nAddEnabledFlag alterRow(insertIf(true())) ~> AlterRow1\nSplit@Existing derive(uCurrentFlag = 0,\n\t\tVerifyField = \"Update\") ~> setUpdateFlag\nsetUpdateFlag filter(Dim_SalesRep_Key <= MAXKEY) ~> Filter1\nFilter1 alterRow(updateIf(true())) ~> AlterRow2\nSplit@Existing derive(uCurrent_Flag = 1,\n\t\tVerifyField = \"New\") ~> DerivedColumn1\nAlterRow1 sink(input(\n\t\tSalesRep_Key as integer,\n\t\tSalesRep_Number as integer,\n\t\tSalesRep_Name as string,\n\t\tSalesRep_Dept as string,\n\t\tCurrentFlag as integer,\n\t\tVerifyField as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tSalesRep_Number,\n\t\tSalesRep_Name,\n\t\tSalesRep_Dept = SalesRep_Department,\n\t\tCurrentFlag = EnabledFlag\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> InsertFlowSink\nAlterRow2 sink(input(\n\t\tSalesRep_Key as integer,\n\t\tSalesRep_Number as integer,\n\t\tSalesRep_Name as string,\n\t\tSalesRep_Dept as string,\n\t\tCurrentFlag as integer,\n\t\tVerifyField as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['SalesRep_Key'],\n\tformat: 'table',\n\tmapColumn(\n\t\tSalesRep_Number,\n\t\tSalesRep_Name,\n\t\tSalesRep_Dept = SalesRep_Department,\n\t\tCurrentFlag = uCurrentFlag,\n\t\tVerifyField,\n\t\tSalesRep_Key = Dim_SalesRep_Key\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> UpdateFlagSink\nDerivedColumn1 sink(input(\n\t\tSalesRep_Key as integer,\n\t\tSalesRep_Number as integer,\n\t\tSalesRep_Name as string,\n\t\tSalesRep_Dept as string,\n\t\tCurrentFlag as integer,\n\t\tVerifyField as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tSalesRep_Number,\n\t\tSalesRep_Name,\n\t\tSalesRep_Dept = SalesRep_Department,\n\t\tCurrentFlag = uCurrent_Flag,\n\t\tVerifyField\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> InsertupdatedRecords"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/BotDestStgSalesRep')]",
				"[concat(variables('factoryId'), '/datasets/BotDestDimSalesKeyHistory')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SalesDataCopy')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_salesdatafromblob",
								"type": "DatasetReference"
							},
							"name": "DataLakeSalesData"
						},
						{
							"dataset": {
								"referenceName": "BotDevl_CustomerData",
								"type": "DatasetReference"
							},
							"name": "ReferenceStreamCustomerData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "BotDevlSalesData10",
								"type": "DatasetReference"
							},
							"name": "TobotdevlDB"
						},
						{
							"dataset": {
								"referenceName": "DS_BOTDevlDBSalesData20",
								"type": "DatasetReference"
							},
							"name": "ToBotDevlsalesData20"
						},
						{
							"dataset": {
								"referenceName": "BotDevl_SalesDataOthers",
								"type": "DatasetReference"
							},
							"name": "ToSalesDataOthers"
						}
					],
					"transformations": [
						{
							"name": "SplitOnPrice"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "LookupCustData"
						},
						{
							"name": "Select1"
						},
						{
							"name": "FilterQuantitymorethan4"
						}
					],
					"script": "source(output(\n\t\tInvoiceNo as integer,\n\t\tStockCode as string,\n\t\tDescription as string,\n\t\tQuantity as integer,\n\t\tInvoiceDate as string,\n\t\tUnitPrice as float,\n\t\tCustomerID as integer,\n\t\tCountry as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> DataLakeSalesData\nsource(output(\n\t\tCID as integer,\n\t\tName as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> ReferenceStreamCustomerData\nDerivedColumn1 split(UnitPrice<=10,\n\tUnitPrice>10 && UnitPrice<=20,\n\tdisjoint: false) ~> SplitOnPrice@(Stream10, Stream20, StreamOthers)\nSelect1 derive(CustomerName = Name,\n\t\tInvoiceDate = toTimestamp(InvoiceDate,'MM-DD-YYYY HH:mm')) ~> DerivedColumn1\nDataLakeSalesData, ReferenceStreamCustomerData lookup(CustomerID == CID,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupCustData\nFilterQuantitymorethan4 select(mapColumn(\n\t\tInvoiceNo,\n\t\tStockCode,\n\t\tDescription,\n\t\tQuantity,\n\t\tInvoiceDate,\n\t\tUnitPrice,\n\t\tCustomerID,\n\t\tCountry,\n\t\tName\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nLookupCustData filter(Quantity>4) ~> FilterQuantitymorethan4\nSplitOnPrice@Stream10 sink(input(\n\t\tInvoiceNo as integer,\n\t\tStockCode as string,\n\t\tDescription as string,\n\t\tQuantity as integer,\n\t\tInvoiceDate as timestamp,\n\t\tUnitPrice as double,\n\t\tCustomerID as integer,\n\t\tCountry as string,\n\t\tCustomerName as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> TobotdevlDB\nSplitOnPrice@Stream20 sink(input(\n\t\tInvoiceNo as integer,\n\t\tStockCode as string,\n\t\tDescription as string,\n\t\tQuantity as integer,\n\t\tInvoiceDate as timestamp,\n\t\tUnitPrice as double,\n\t\tCustomerID as integer,\n\t\tCountry as string,\n\t\tCustomerName as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> ToBotDevlsalesData20\nSplitOnPrice@StreamOthers sink(input(\n\t\tInvoiceNo as integer,\n\t\tStockCode as string,\n\t\tDescription as string,\n\t\tQuantity as integer,\n\t\tInvoiceDate as timestamp,\n\t\tUnitPrice as double,\n\t\tCustomerID as integer,\n\t\tCountry as string,\n\t\tCustomerName as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> ToSalesDataOthers"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_salesdatafromblob')]",
				"[concat(variables('factoryId'), '/datasets/BotDevl_CustomerData')]",
				"[concat(variables('factoryId'), '/datasets/BotDevlSalesData10')]",
				"[concat(variables('factoryId'), '/datasets/DS_BOTDevlDBSalesData20')]",
				"[concat(variables('factoryId'), '/datasets/BotDevl_SalesDataOthers')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SplitCustData')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_BotDevlCustData",
								"type": "DatasetReference"
							},
							"name": "CustData"
						},
						{
							"dataset": {
								"referenceName": "DS_BotDevl_DeptData",
								"type": "DatasetReference"
							},
							"name": "DeptData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_BOTDestHRTable",
								"type": "DatasetReference"
							},
							"name": "toHRTable"
						},
						{
							"dataset": {
								"referenceName": "DS_BOTDestFinanceTable",
								"type": "DatasetReference"
							},
							"name": "ToFinanceTable"
						}
					],
					"transformations": [
						{
							"name": "Join1"
						},
						{
							"name": "SplitBasedOnDept"
						},
						{
							"name": "ChangeDepidColName"
						}
					],
					"script": "source(output(\n\t\tid as integer,\n\t\tCustomer_Name as string,\n\t\tSalary as double,\n\t\tDept_ID as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> CustData\nsource(output(\n\t\tid as integer,\n\t\tDept_Name as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> DeptData\nCustData, DeptData join(Dept_ID == DeptData@id,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> Join1\nChangeDepidColName split(equals(Dept_Name,'HR'),\n\tequals(Dept_Name, 'Finance'),\n\tdisjoint: false) ~> SplitBasedOnDept@(HRTable, FinanceTable)\nJoin1 select(mapColumn(\n\t\tCust_ID = CustData@id,\n\t\tCustomer_Name,\n\t\tSalary,\n\t\tDept_ID,\n\t\tDept_Name\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> ChangeDepidColName\nSplitBasedOnDept@HRTable sink(input(\n\t\tCust_ID as integer,\n\t\tCust_Name as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tCust_ID,\n\t\tCust_Name = Customer_Name\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> toHRTable\nSplitBasedOnDept@FinanceTable sink(input(\n\t\tCust_ID as integer,\n\t\tCust_Name as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> ToFinanceTable"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_BotDevlCustData')]",
				"[concat(variables('factoryId'), '/datasets/DS_BotDevl_DeptData')]",
				"[concat(variables('factoryId'), '/datasets/DS_BOTDestHRTable')]",
				"[concat(variables('factoryId'), '/datasets/DS_BOTDestFinanceTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/joinTables')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "join Cust and Sales Table",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_salesdatafromblob",
								"type": "DatasetReference"
							},
							"name": "SalesData"
						},
						{
							"dataset": {
								"referenceName": "BlobCustDataSource",
								"type": "DatasetReference"
							},
							"name": "CustData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "BotdevlSalesData",
								"type": "DatasetReference"
							},
							"name": "SQLTable"
						}
					],
					"transformations": [
						{
							"name": "Exists1"
						}
					],
					"script": "source(output(\n\t\tInvoiceNo as integer,\n\t\tStockCode as string,\n\t\tDescription as string,\n\t\tQuantity as integer,\n\t\tInvoiceDate as date,\n\t\tUnitPrice as float,\n\t\tCustomerID as integer,\n\t\tCountry as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> SalesData\nsource(output(\n\t\tCID as integer,\n\t\tName as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> CustData\nSalesData, CustData exists(CustomerID == CID,\n\tnegate:true,\n\tbroadcast: 'auto')~> Exists1\nExists1 sink(input(\n\t\tInvoiceNo as integer,\n\t\tStockCode as string,\n\t\tDescription as string,\n\t\tQuantity as integer,\n\t\tInvoiceDate as date,\n\t\tUnitPrice as float,\n\t\tCustomerID as integer,\n\t\tCountry as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tpreSQLs:['truncate table dbo.SalesData'],\n\tmapColumn(\n\t\tInvoiceNo,\n\t\tStockCode,\n\t\tDescription,\n\t\tQuantity,\n\t\tInvoiceDate,\n\t\tUnitPrice,\n\t\tCustomerID,\n\t\tCountry\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SQLTable"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_salesdatafromblob')]",
				"[concat(variables('factoryId'), '/datasets/BlobCustDataSource')]",
				"[concat(variables('factoryId'), '/datasets/BotdevlSalesData')]"
			]
		}
	]
}